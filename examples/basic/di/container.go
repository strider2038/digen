// Code generated by DIGEN; DO NOT EDIT.
// This file was generated by Dependency Injection Container Generator rev-5ccec14-dirty.
// See docs at https://github.com/strider2038/digen

package di

import (
	config "basic/app/config"
	domain "basic/app/domain"
	httphandler "basic/app/httphandler"
	internal "basic/di/internal"
	"context"
	"errors"
	"fmt"
	"net/http"
	"sync"
)

type Container struct {
	mu *sync.Mutex
	c  *internal.Container
}

type Injector func(c *Container) error

func NewContainer(config config.Params, injectors ...Injector) (*Container, error) {
	c := &Container{
		c:  internal.NewContainer(),
		mu: &sync.Mutex{},
	}

	c.c.SetConfig(config)

	for _, inject := range injectors {
		err := inject(c)
		if err != nil {
			return nil, err
		}
	}

	return c, nil
}

func (c *Container) Server(ctx context.Context) (s *http.Server, err error) {
	c.mu.Lock()
	defer c.mu.Unlock()

	defer func() {
		if recovered := recover(); recovered != nil {
			err = newRecoveredError(recovered, c.c.Error())
		}
	}()

	s = c.c.Server(ctx)
	err = c.c.Error()

	return s, err
}

func (c *Container) FindEntityHandler(ctx context.Context) (s *httphandler.FindEntity, err error) {
	c.mu.Lock()
	defer c.mu.Unlock()

	defer func() {
		if recovered := recover(); recovered != nil {
			err = newRecoveredError(recovered, c.c.Error())
		}
	}()

	s = c.c.API().(*internal.APIContainer).FindEntityHandler(ctx)
	err = c.c.Error()

	return s, err
}

func SetEntityRepository(s domain.EntityRepository) Injector {
	return func(c *Container) error {
		c.c.Repositories().(*internal.RepositoryContainer).SetEntityRepository(s)

		return nil
	}
}

func (c *Container) Close() {
	c.mu.Lock()
	defer c.mu.Unlock()

	c.c.Close()
}

func newRecoveredError(recovered any, err error) error {
	r := fmt.Errorf("panic: %v", recovered)
	if err != nil {
		return errors.Join(r, fmt.Errorf("previous error: %w", err))
	}
	return r
}
