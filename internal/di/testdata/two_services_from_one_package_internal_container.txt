package internal

import (
	"context"
	factories "example.com/test/di/internal/factories"
	domain "example.com/test/domain"
)

type Container struct {
	err error

	firstService  *domain.Service
	secondService *domain.Service
}

func NewContainer() *Container {
	c := &Container{}

	return c
}

// Error returns the first initialization error, which can be set via SetError in a service definition.
func (c *Container) Error() error {
	return c.err
}

// SetError sets the first error into container. The error is used in the public container to return an initialization error.
func (c *Container) SetError(err error) {
	if err != nil && c.err == nil {
		c.err = err
	}
}

func (c *Container) FirstService(ctx context.Context) *domain.Service {
	if c.firstService == nil && c.err == nil {
		c.firstService = factories.CreateFirstService(ctx, c)
	}
	return c.firstService
}

func (c *Container) SecondService(ctx context.Context) *domain.Service {
	if c.secondService == nil && c.err == nil {
		c.secondService = factories.CreateSecondService(ctx, c)
	}
	return c.secondService
}

func (c *Container) Close() {}
