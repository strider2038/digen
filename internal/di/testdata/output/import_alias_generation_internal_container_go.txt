// Code generated by DIGEN; DO NOT EDIT.
// This file was generated by Dependency Injection Container Generator vX.X.X.
// See docs at https://github.com/strider2038/digen
package internal

import (
	"context"
	"errors"
	factories "example.com/test/di/internal/factories"
	httpadapter "example.com/test/infrastructure/api/http"
	"fmt"
)

type Container struct {
	errs []error
	init bitset

	serviceName *httpadapter.ServiceHandler
}

func NewContainer() *Container {
	c := &Container{}
	c.init = make(bitset, 1)

	return c
}

// Error returns the first initialization error, which can be set via SetError in a service definition.
func (c *Container) Error() error {
	return errors.Join(c.errs...)
}

// SetError sets the first error into container. The error is used in the public container to return an initialization error.
// Deprecated. Return error in factory instead.
func (c *Container) SetError(err error) {
	c.addError(err)
}

func (c *Container) addError(err error) {
	if err != nil {
		c.errs = append(c.errs, err)
	}
}

func (c *Container) ServiceName(ctx context.Context) *httpadapter.ServiceHandler {
	if !c.init.IsSet(0) && c.errs == nil {
		var err error
		c.serviceName, err = factories.CreateServiceName(ctx, c)
		if err != nil {
			c.addError(fmt.Errorf("create ServiceName: %w", err))
		}
		c.init.Set(0)
	}
	return c.serviceName
}

func (c *Container) Close() {}
