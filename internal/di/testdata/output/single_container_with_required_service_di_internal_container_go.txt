// Code generated by DIGEN; DO NOT EDIT.
// This file was generated by Dependency Injection Container Generator (unknown version).
// See docs at https://github.com/strider2038/digen
package internal

import (
	"context"
	"errors"
	domain "example.com/test/domain"
)

const (
	id_ServiceName = iota
)

type Container struct {
	errs []error
	init bitset

	serviceName *domain.Service
}

func NewContainer() *Container {
	c := &Container{}
	c.init = make(bitset, 1)

	return c
}

// Error returns the first initialization error, which can be set via SetError in a service definition.
func (c *Container) Error() error {
	return errors.Join(c.errs...)
}

// SetError sets the first error into container. The error is used in the public container to return an initialization error.
// Deprecated. Return error in factory instead.
func (c *Container) SetError(err error) {
	c.addError(err)
}

func (c *Container) addError(err error) {
	if err != nil {
		c.errs = append(c.errs, err)
	}
}

func (c *Container) ServiceName(ctx context.Context) *domain.Service {
	return c.serviceName
}

func (c *Container) SetServiceName(s *domain.Service) {
	c.serviceName = s
	c.init.Set(id_ServiceName)
}

func (c *Container) Close() {}
