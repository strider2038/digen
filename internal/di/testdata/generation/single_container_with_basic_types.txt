package internal

import (
	"context"
	factories "example.com/test/di/internal/factories"
	"fmt"
	"net/url"
	"time"
)

type Container struct {
	err  error
	init bitset

	stringOption   string
	stringPointer  *string
	intOption      int
	timeOption     time.Time
	durationOption time.Duration
	urloption      url.URL
	intSlice       []int
	stringMap      map[string]string
}

func NewContainer() *Container {
	c := &Container{}
	c.init = make(bitset, 1)

	return c
}

// Error returns the first initialization error, which can be set via SetError in a service definition.
func (c *Container) Error() error {
	return c.err
}

// SetError sets the first error into container. The error is used in the public container to return an initialization error.
func (c *Container) SetError(err error) {
	if err != nil && c.err == nil {
		c.err = err
	}
}

func (c *Container) StringOption(ctx context.Context) string {
	if !c.init.IsSet(0) && c.err == nil {
		var err error
		c.stringOption, err = factories.CreateStringOption(ctx, c)
		if err != nil {
			c.SetError(fmt.Errorf("create StringOption: %w", err))
		}
		c.init.Set(0)
	}
	return c.stringOption
}

func (c *Container) StringPointer(ctx context.Context) *string {
	if !c.init.IsSet(1) && c.err == nil {
		var err error
		c.stringPointer, err = factories.CreateStringPointer(ctx, c)
		if err != nil {
			c.SetError(fmt.Errorf("create StringPointer: %w", err))
		}
		c.init.Set(1)
	}
	return c.stringPointer
}

func (c *Container) IntOption(ctx context.Context) int {
	if !c.init.IsSet(2) && c.err == nil {
		var err error
		c.intOption, err = factories.CreateIntOption(ctx, c)
		if err != nil {
			c.SetError(fmt.Errorf("create IntOption: %w", err))
		}
		c.init.Set(2)
	}
	return c.intOption
}

func (c *Container) TimeOption(ctx context.Context) time.Time {
	if !c.init.IsSet(3) && c.err == nil {
		var err error
		c.timeOption, err = factories.CreateTimeOption(ctx, c)
		if err != nil {
			c.SetError(fmt.Errorf("create TimeOption: %w", err))
		}
		c.init.Set(3)
	}
	return c.timeOption
}

func (c *Container) DurationOption(ctx context.Context) time.Duration {
	if !c.init.IsSet(4) && c.err == nil {
		var err error
		c.durationOption, err = factories.CreateDurationOption(ctx, c)
		if err != nil {
			c.SetError(fmt.Errorf("create DurationOption: %w", err))
		}
		c.init.Set(4)
	}
	return c.durationOption
}

func (c *Container) URLOption(ctx context.Context) url.URL {
	if !c.init.IsSet(5) && c.err == nil {
		var err error
		c.urloption, err = factories.CreateURLOption(ctx, c)
		if err != nil {
			c.SetError(fmt.Errorf("create URLOption: %w", err))
		}
		c.init.Set(5)
	}
	return c.urloption
}

func (c *Container) IntSlice(ctx context.Context) []int {
	if !c.init.IsSet(6) && c.err == nil {
		var err error
		c.intSlice, err = factories.CreateIntSlice(ctx, c)
		if err != nil {
			c.SetError(fmt.Errorf("create IntSlice: %w", err))
		}
		c.init.Set(6)
	}
	return c.intSlice
}

func (c *Container) StringMap(ctx context.Context) map[string]string {
	if !c.init.IsSet(7) && c.err == nil {
		var err error
		c.stringMap, err = factories.CreateStringMap(ctx, c)
		if err != nil {
			c.SetError(fmt.Errorf("create StringMap: %w", err))
		}
		c.init.Set(7)
	}
	return c.stringMap
}

func (c *Container) Close() {}
