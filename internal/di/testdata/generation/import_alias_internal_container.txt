package internal

import (
	"context"
	factories "example.com/test/di/internal/factories"
	httpadapter "example.com/test/infrastructure/api/http"
)

type Container struct {
	err  error
	init bitset

	serviceName *httpadapter.ServiceHandler
}

func NewContainer() *Container {
	c := &Container{}
	c.init = make(bitset, 1)

	return c
}

// Error returns the first initialization error, which can be set via SetError in a service definition.
func (c *Container) Error() error {
	return c.err
}

// SetError sets the first error into container. The error is used in the public container to return an initialization error.
func (c *Container) SetError(err error) {
	if err != nil && c.err == nil {
		c.err = err
	}
}

func (c *Container) ServiceName(ctx context.Context) *httpadapter.ServiceHandler {
	if !c.init.IsSet(0) && c.err == nil {
		c.serviceName = factories.CreateServiceName(ctx, c)
		c.init.Set(0)
	}
	return c.serviceName
}

func (c *Container) Close() {}
