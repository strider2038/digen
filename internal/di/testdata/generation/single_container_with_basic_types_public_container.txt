package di

import (
	"context"
	"errors"
	internal "example.com/test/di/internal"
	"fmt"
	"sync"
	"time"
)

type Container struct {
	mu *sync.Mutex
	c  *internal.Container
}

type Injector func(c *Container) error

func NewContainer(injectors ...Injector) (*Container, error) {
	c := &Container{
		c:  internal.NewContainer(),
		mu: &sync.Mutex{},
	}

	for _, inject := range injectors {
		err := inject(c)
		if err != nil {
			return nil, err
		}
	}

	return c, nil
}

func (c *Container) StringOption(ctx context.Context) (s string, err error) {
	c.mu.Lock()
	defer c.mu.Unlock()

	defer func() {
		if recovered := recover(); recovered != nil {
			err = newRecoveredError(recovered, c.c.Error())
		}
	}()

	s = c.c.StringOption(ctx)
	err = c.c.Error()

	return s, err
}

func (c *Container) StringPointer(ctx context.Context) (s *string, err error) {
	c.mu.Lock()
	defer c.mu.Unlock()

	defer func() {
		if recovered := recover(); recovered != nil {
			err = newRecoveredError(recovered, c.c.Error())
		}
	}()

	s = c.c.StringPointer(ctx)
	err = c.c.Error()

	return s, err
}

func (c *Container) IntOption(ctx context.Context) (s int, err error) {
	c.mu.Lock()
	defer c.mu.Unlock()

	defer func() {
		if recovered := recover(); recovered != nil {
			err = newRecoveredError(recovered, c.c.Error())
		}
	}()

	s = c.c.IntOption(ctx)
	err = c.c.Error()

	return s, err
}

func (c *Container) TimeOption(ctx context.Context) (s time.Time, err error) {
	c.mu.Lock()
	defer c.mu.Unlock()

	defer func() {
		if recovered := recover(); recovered != nil {
			err = newRecoveredError(recovered, c.c.Error())
		}
	}()

	s = c.c.TimeOption(ctx)
	err = c.c.Error()

	return s, err
}

func (c *Container) DurationOption(ctx context.Context) (s time.Duration, err error) {
	c.mu.Lock()
	defer c.mu.Unlock()

	defer func() {
		if recovered := recover(); recovered != nil {
			err = newRecoveredError(recovered, c.c.Error())
		}
	}()

	s = c.c.DurationOption(ctx)
	err = c.c.Error()

	return s, err
}

func (c *Container) Close() {
	c.mu.Lock()
	defer c.mu.Unlock()

	c.c.Close()
}

func newRecoveredError(recovered any, err error) error {
	r := fmt.Errorf("panic: %v", recovered)
	if err != nil {
		return errors.Join(r, fmt.Errorf("previous error: %w", err))
	}
	return r
}
