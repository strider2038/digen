package di

import (
	_ "embed"
	"text/template"
)

//go:embed templates/README.md
var readmeTemplate string

type templateParameters struct {
	ContainerName         string
	ServicePrefix         string
	ServicePath           string
	ServiceName           string
	ServiceTitle          string
	ServiceType           string
	ServiceZeroComparison string
	ServicePublicName     string
	HasDefinition         bool
	PanicOnNil            bool
}

var headingTemplate = template.Must(template.New("heading").Parse(`// Code generated by DIGEN; DO NOT EDIT.
// This file was generated by Dependency Injection Container Generator {{.Version}}.
// See docs at https://github.com/strider2038/digen

`))

var factoryFuncTemplate = template.Must(template.New("factory").Parse(`
func Create{{.ServicePrefix}}{{.ServiceTitle}}(ctx context.Context, c lookup.Container) {{.ServiceType}} {
	panic("not implemented")
}
`))

var definitionsContainerFileTemplate = template.Must(template.New("definitions container").Parse(`package definitions

// Container is a root dependency injection container. It is required to describe
// your services.
type Container struct {
	// put the list of your services here
	// for example
	//  log *log.Logger

	// also, you can describe your services in a separate container
	// repositories RepositoryContainer
}

// this is a separate container
// type RepositoryContainer {
// 	entityRepository domain.EntityRepository
// }
`))

var argumentTemplate = template.Must(template.New("argument").Parse(
	"\n\t{{.ServiceName}} {{.ServiceType}},",
))

var argumentSetterTemplate = template.Must(template.New("argument setter").Parse(
	"\n\tc.c.Set{{.ServiceTitle}}({{.ServiceName}})",
))
